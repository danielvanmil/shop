///<reference path="./jaydata.d.ts" />
/*//////////////////////////////////////////////////////////////////////////////////////
////// Autogenerated by JaySvcUtil.exe http://JayData.org for more info        /////////
//////                      oData V2 TypeScript                                /////////
//////////////////////////////////////////////////////////////////////////////////////*/

type bool = boolean;

declare module NorthwindModel {
  class Category extends $data.Entity {
    constructor ();
    constructor (initData: { CategoryID?: number; CategoryName?: string; Description?: string; Picture?: $data.Blob; Products?: NorthwindModel.Product[]; });
    CategoryID: number;
    CategoryName: string;
    Description: string;
    Picture: $data.Blob;
    Products: NorthwindModel.Product[];
    
  }

  export interface CategoryQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Category) => bool): NorthwindModel.CategoryQueryable;
    filter(predicate:(it: NorthwindModel.Category) => bool, thisArg: any): NorthwindModel.CategoryQueryable;

    map(projection: (it: NorthwindModel.Category) => any): NorthwindModel.CategoryQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Category) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Category[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Category[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Category, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Category) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Category, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Category[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.CategoryQueryable;
    skip(amout: number): NorthwindModel.CategoryQueryable;

    order(selector: string): NorthwindModel.CategoryQueryable;
    orderBy(predicate: (it: NorthwindModel.Category) => any): NorthwindModel.CategoryQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Category) => any): NorthwindModel.CategoryQueryable;
    
    first(predicate: (it: NorthwindModel.Category, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Category) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Category, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Category[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.CategoryQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface CategorySet extends CategoryQueryable {
    add(initData: { CategoryID?: number; CategoryName?: string; Description?: string; Picture?: $data.Blob; Products?: NorthwindModel.Product[]; }): NorthwindModel.Category;
    add(item: NorthwindModel.Category): NorthwindModel.Category;

    attach(item: NorthwindModel.Category): void;
    attach(item: { CategoryID: number; }): void;
    attachOrGet(item: NorthwindModel.Category): NorthwindModel.Category;
    attachOrGet(item: { CategoryID: number; }): NorthwindModel.Category;

    detach(item: NorthwindModel.Category): void;
    detach(item: { CategoryID: number; }): void;

    remove(item: NorthwindModel.Category): void;
    remove(item: { CategoryID: number; }): void;
    
    elementType: new (initData: { CategoryID?: number; CategoryName?: string; Description?: string; Picture?: $data.Blob; Products?: NorthwindModel.Product[]; }) => NorthwindModel.Category;
  }

  class CustomerDemographic extends $data.Entity {
    constructor ();
    constructor (initData: { CustomerTypeID?: string; CustomerDesc?: string; Customers?: NorthwindModel.Customer[]; });
    CustomerTypeID: string;
    CustomerDesc: string;
    Customers: NorthwindModel.Customer[];
    
  }

  export interface CustomerDemographicQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.CustomerDemographic) => bool): NorthwindModel.CustomerDemographicQueryable;
    filter(predicate:(it: NorthwindModel.CustomerDemographic) => bool, thisArg: any): NorthwindModel.CustomerDemographicQueryable;

    map(projection: (it: NorthwindModel.CustomerDemographic) => any): NorthwindModel.CustomerDemographicQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.CustomerDemographic) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.CustomerDemographic[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.CustomerDemographic[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.CustomerDemographic, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.CustomerDemographic) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.CustomerDemographic, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.CustomerDemographic[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.CustomerDemographicQueryable;
    skip(amout: number): NorthwindModel.CustomerDemographicQueryable;

    order(selector: string): NorthwindModel.CustomerDemographicQueryable;
    orderBy(predicate: (it: NorthwindModel.CustomerDemographic) => any): NorthwindModel.CustomerDemographicQueryable;
    orderByDescending(predicate: (it: NorthwindModel.CustomerDemographic) => any): NorthwindModel.CustomerDemographicQueryable;
    
    first(predicate: (it: NorthwindModel.CustomerDemographic, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.CustomerDemographic) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.CustomerDemographic, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.CustomerDemographic[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.CustomerDemographicQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface CustomerDemographicSet extends CustomerDemographicQueryable {
    add(initData: { CustomerTypeID?: string; CustomerDesc?: string; Customers?: NorthwindModel.Customer[]; }): NorthwindModel.CustomerDemographic;
    add(item: NorthwindModel.CustomerDemographic): NorthwindModel.CustomerDemographic;

    attach(item: NorthwindModel.CustomerDemographic): void;
    attach(item: { CustomerTypeID: string; }): void;
    attachOrGet(item: NorthwindModel.CustomerDemographic): NorthwindModel.CustomerDemographic;
    attachOrGet(item: { CustomerTypeID: string; }): NorthwindModel.CustomerDemographic;

    detach(item: NorthwindModel.CustomerDemographic): void;
    detach(item: { CustomerTypeID: string; }): void;

    remove(item: NorthwindModel.CustomerDemographic): void;
    remove(item: { CustomerTypeID: string; }): void;
    
    elementType: new (initData: { CustomerTypeID?: string; CustomerDesc?: string; Customers?: NorthwindModel.Customer[]; }) => NorthwindModel.CustomerDemographic;
  }

  class Customer extends $data.Entity {
    constructor ();
    constructor (initData: { CustomerID?: string; CompanyName?: string; ContactName?: string; ContactTitle?: string; Address?: string; City?: string; Region?: string; PostalCode?: string; Country?: string; Phone?: string; Fax?: string; Orders?: NorthwindModel.Order[]; CustomerDemographics?: NorthwindModel.CustomerDemographic[]; });
    CustomerID: string;
    CompanyName: string;
    ContactName: string;
    ContactTitle: string;
    Address: string;
    City: string;
    Region: string;
    PostalCode: string;
    Country: string;
    Phone: string;
    Fax: string;
    Orders: NorthwindModel.Order[];
    CustomerDemographics: NorthwindModel.CustomerDemographic[];
    
  }

  export interface CustomerQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Customer) => bool): NorthwindModel.CustomerQueryable;
    filter(predicate:(it: NorthwindModel.Customer) => bool, thisArg: any): NorthwindModel.CustomerQueryable;

    map(projection: (it: NorthwindModel.Customer) => any): NorthwindModel.CustomerQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Customer) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Customer[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Customer[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Customer, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Customer) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Customer, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Customer[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.CustomerQueryable;
    skip(amout: number): NorthwindModel.CustomerQueryable;

    order(selector: string): NorthwindModel.CustomerQueryable;
    orderBy(predicate: (it: NorthwindModel.Customer) => any): NorthwindModel.CustomerQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Customer) => any): NorthwindModel.CustomerQueryable;
    
    first(predicate: (it: NorthwindModel.Customer, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Customer) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Customer, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Customer[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.CustomerQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface CustomerSet extends CustomerQueryable {
    add(initData: { CustomerID?: string; CompanyName?: string; ContactName?: string; ContactTitle?: string; Address?: string; City?: string; Region?: string; PostalCode?: string; Country?: string; Phone?: string; Fax?: string; Orders?: NorthwindModel.Order[]; CustomerDemographics?: NorthwindModel.CustomerDemographic[]; }): NorthwindModel.Customer;
    add(item: NorthwindModel.Customer): NorthwindModel.Customer;

    attach(item: NorthwindModel.Customer): void;
    attach(item: { CustomerID: string; }): void;
    attachOrGet(item: NorthwindModel.Customer): NorthwindModel.Customer;
    attachOrGet(item: { CustomerID: string; }): NorthwindModel.Customer;

    detach(item: NorthwindModel.Customer): void;
    detach(item: { CustomerID: string; }): void;

    remove(item: NorthwindModel.Customer): void;
    remove(item: { CustomerID: string; }): void;
    
    elementType: new (initData: { CustomerID?: string; CompanyName?: string; ContactName?: string; ContactTitle?: string; Address?: string; City?: string; Region?: string; PostalCode?: string; Country?: string; Phone?: string; Fax?: string; Orders?: NorthwindModel.Order[]; CustomerDemographics?: NorthwindModel.CustomerDemographic[]; }) => NorthwindModel.Customer;
  }

  class Employee extends $data.Entity {
    constructor ();
    constructor (initData: { EmployeeID?: number; LastName?: string; FirstName?: string; Title?: string; TitleOfCourtesy?: string; BirthDate?: Date; HireDate?: Date; Address?: string; City?: string; Region?: string; PostalCode?: string; Country?: string; HomePhone?: string; Extension?: string; Photo?: $data.Blob; Notes?: string; ReportsTo?: number; PhotoPath?: string; Employees1?: NorthwindModel.Employee[]; Employee1?: NorthwindModel.Employee; Orders?: NorthwindModel.Order[]; Territories?: NorthwindModel.Territory[]; });
    EmployeeID: number;
    LastName: string;
    FirstName: string;
    Title: string;
    TitleOfCourtesy: string;
    BirthDate: Date;
    HireDate: Date;
    Address: string;
    City: string;
    Region: string;
    PostalCode: string;
    Country: string;
    HomePhone: string;
    Extension: string;
    Photo: $data.Blob;
    Notes: string;
    ReportsTo: number;
    PhotoPath: string;
    Employees1: NorthwindModel.Employee[];
    Employee1: NorthwindModel.Employee;
    Orders: NorthwindModel.Order[];
    Territories: NorthwindModel.Territory[];
    
  }

  export interface EmployeeQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Employee) => bool): NorthwindModel.EmployeeQueryable;
    filter(predicate:(it: NorthwindModel.Employee) => bool, thisArg: any): NorthwindModel.EmployeeQueryable;

    map(projection: (it: NorthwindModel.Employee) => any): NorthwindModel.EmployeeQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Employee) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Employee[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Employee[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Employee, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Employee) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Employee, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Employee[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.EmployeeQueryable;
    skip(amout: number): NorthwindModel.EmployeeQueryable;

    order(selector: string): NorthwindModel.EmployeeQueryable;
    orderBy(predicate: (it: NorthwindModel.Employee) => any): NorthwindModel.EmployeeQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Employee) => any): NorthwindModel.EmployeeQueryable;
    
    first(predicate: (it: NorthwindModel.Employee, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Employee) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Employee, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Employee[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.EmployeeQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface EmployeeSet extends EmployeeQueryable {
    add(initData: { EmployeeID?: number; LastName?: string; FirstName?: string; Title?: string; TitleOfCourtesy?: string; BirthDate?: Date; HireDate?: Date; Address?: string; City?: string; Region?: string; PostalCode?: string; Country?: string; HomePhone?: string; Extension?: string; Photo?: $data.Blob; Notes?: string; ReportsTo?: number; PhotoPath?: string; Employees1?: NorthwindModel.Employee[]; Employee1?: NorthwindModel.Employee; Orders?: NorthwindModel.Order[]; Territories?: NorthwindModel.Territory[]; }): NorthwindModel.Employee;
    add(item: NorthwindModel.Employee): NorthwindModel.Employee;

    attach(item: NorthwindModel.Employee): void;
    attach(item: { EmployeeID: number; }): void;
    attachOrGet(item: NorthwindModel.Employee): NorthwindModel.Employee;
    attachOrGet(item: { EmployeeID: number; }): NorthwindModel.Employee;

    detach(item: NorthwindModel.Employee): void;
    detach(item: { EmployeeID: number; }): void;

    remove(item: NorthwindModel.Employee): void;
    remove(item: { EmployeeID: number; }): void;
    
    elementType: new (initData: { EmployeeID?: number; LastName?: string; FirstName?: string; Title?: string; TitleOfCourtesy?: string; BirthDate?: Date; HireDate?: Date; Address?: string; City?: string; Region?: string; PostalCode?: string; Country?: string; HomePhone?: string; Extension?: string; Photo?: $data.Blob; Notes?: string; ReportsTo?: number; PhotoPath?: string; Employees1?: NorthwindModel.Employee[]; Employee1?: NorthwindModel.Employee; Orders?: NorthwindModel.Order[]; Territories?: NorthwindModel.Territory[]; }) => NorthwindModel.Employee;
  }

  class Order_Detail extends $data.Entity {
    constructor ();
    constructor (initData: { OrderID?: number; ProductID?: number; UnitPrice?: number; Quantity?: number; Discount?: number; Order?: NorthwindModel.Order; Product?: NorthwindModel.Product; });
    OrderID: number;
    ProductID: number;
    UnitPrice: number;
    Quantity: number;
    Discount: number;
    Order: NorthwindModel.Order;
    Product: NorthwindModel.Product;
    
  }

  export interface Order_DetailQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Order_Detail) => bool): NorthwindModel.Order_DetailQueryable;
    filter(predicate:(it: NorthwindModel.Order_Detail) => bool, thisArg: any): NorthwindModel.Order_DetailQueryable;

    map(projection: (it: NorthwindModel.Order_Detail) => any): NorthwindModel.Order_DetailQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Order_Detail) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Order_Detail[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Order_Detail[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Order_Detail, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Order_Detail) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Order_Detail, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Order_Detail[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.Order_DetailQueryable;
    skip(amout: number): NorthwindModel.Order_DetailQueryable;

    order(selector: string): NorthwindModel.Order_DetailQueryable;
    orderBy(predicate: (it: NorthwindModel.Order_Detail) => any): NorthwindModel.Order_DetailQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Order_Detail) => any): NorthwindModel.Order_DetailQueryable;
    
    first(predicate: (it: NorthwindModel.Order_Detail, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Order_Detail) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Order_Detail, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Order_Detail[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.Order_DetailQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface Order_DetailSet extends Order_DetailQueryable {
    add(initData: { OrderID?: number; ProductID?: number; UnitPrice?: number; Quantity?: number; Discount?: number; Order?: NorthwindModel.Order; Product?: NorthwindModel.Product; }): NorthwindModel.Order_Detail;
    add(item: NorthwindModel.Order_Detail): NorthwindModel.Order_Detail;

    attach(item: NorthwindModel.Order_Detail): void;
    attach(item: { OrderID: number; ProductID: number; }): void;
    attachOrGet(item: NorthwindModel.Order_Detail): NorthwindModel.Order_Detail;
    attachOrGet(item: { OrderID: number; ProductID: number; }): NorthwindModel.Order_Detail;

    detach(item: NorthwindModel.Order_Detail): void;
    detach(item: { OrderID: number; ProductID: number; }): void;

    remove(item: NorthwindModel.Order_Detail): void;
    remove(item: { OrderID: number; ProductID: number; }): void;
    
    elementType: new (initData: { OrderID?: number; ProductID?: number; UnitPrice?: number; Quantity?: number; Discount?: number; Order?: NorthwindModel.Order; Product?: NorthwindModel.Product; }) => NorthwindModel.Order_Detail;
  }

  class Order extends $data.Entity {
    constructor ();
    constructor (initData: { OrderID?: number; CustomerID?: string; EmployeeID?: number; OrderDate?: Date; RequiredDate?: Date; ShippedDate?: Date; ShipVia?: number; Freight?: number; ShipName?: string; ShipAddress?: string; ShipCity?: string; ShipRegion?: string; ShipPostalCode?: string; ShipCountry?: string; Customer?: NorthwindModel.Customer; Employee?: NorthwindModel.Employee; Order_Details?: NorthwindModel.Order_Detail[]; Shipper?: NorthwindModel.Shipper; });
    OrderID: number;
    CustomerID: string;
    EmployeeID: number;
    OrderDate: Date;
    RequiredDate: Date;
    ShippedDate: Date;
    ShipVia: number;
    Freight: number;
    ShipName: string;
    ShipAddress: string;
    ShipCity: string;
    ShipRegion: string;
    ShipPostalCode: string;
    ShipCountry: string;
    Customer: NorthwindModel.Customer;
    Employee: NorthwindModel.Employee;
    Order_Details: NorthwindModel.Order_Detail[];
    Shipper: NorthwindModel.Shipper;
    
  }

  export interface OrderQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Order) => bool): NorthwindModel.OrderQueryable;
    filter(predicate:(it: NorthwindModel.Order) => bool, thisArg: any): NorthwindModel.OrderQueryable;

    map(projection: (it: NorthwindModel.Order) => any): NorthwindModel.OrderQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Order) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Order[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Order[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Order, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Order) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Order, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Order[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.OrderQueryable;
    skip(amout: number): NorthwindModel.OrderQueryable;

    order(selector: string): NorthwindModel.OrderQueryable;
    orderBy(predicate: (it: NorthwindModel.Order) => any): NorthwindModel.OrderQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Order) => any): NorthwindModel.OrderQueryable;
    
    first(predicate: (it: NorthwindModel.Order, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Order) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Order, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Order[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.OrderQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface OrderSet extends OrderQueryable {
    add(initData: { OrderID?: number; CustomerID?: string; EmployeeID?: number; OrderDate?: Date; RequiredDate?: Date; ShippedDate?: Date; ShipVia?: number; Freight?: number; ShipName?: string; ShipAddress?: string; ShipCity?: string; ShipRegion?: string; ShipPostalCode?: string; ShipCountry?: string; Customer?: NorthwindModel.Customer; Employee?: NorthwindModel.Employee; Order_Details?: NorthwindModel.Order_Detail[]; Shipper?: NorthwindModel.Shipper; }): NorthwindModel.Order;
    add(item: NorthwindModel.Order): NorthwindModel.Order;

    attach(item: NorthwindModel.Order): void;
    attach(item: { OrderID: number; }): void;
    attachOrGet(item: NorthwindModel.Order): NorthwindModel.Order;
    attachOrGet(item: { OrderID: number; }): NorthwindModel.Order;

    detach(item: NorthwindModel.Order): void;
    detach(item: { OrderID: number; }): void;

    remove(item: NorthwindModel.Order): void;
    remove(item: { OrderID: number; }): void;
    
    elementType: new (initData: { OrderID?: number; CustomerID?: string; EmployeeID?: number; OrderDate?: Date; RequiredDate?: Date; ShippedDate?: Date; ShipVia?: number; Freight?: number; ShipName?: string; ShipAddress?: string; ShipCity?: string; ShipRegion?: string; ShipPostalCode?: string; ShipCountry?: string; Customer?: NorthwindModel.Customer; Employee?: NorthwindModel.Employee; Order_Details?: NorthwindModel.Order_Detail[]; Shipper?: NorthwindModel.Shipper; }) => NorthwindModel.Order;
  }

  class Product extends $data.Entity {
    constructor ();
    constructor (initData: { ProductID?: number; ProductName?: string; SupplierID?: number; CategoryID?: number; QuantityPerUnit?: string; UnitPrice?: number; UnitsInStock?: number; UnitsOnOrder?: number; ReorderLevel?: number; Discontinued?: bool; Category?: NorthwindModel.Category; Order_Details?: NorthwindModel.Order_Detail[]; Supplier?: NorthwindModel.Supplier; });
    ProductID: number;
    ProductName: string;
    SupplierID: number;
    CategoryID: number;
    QuantityPerUnit: string;
    UnitPrice: number;
    UnitsInStock: number;
    UnitsOnOrder: number;
    ReorderLevel: number;
    Discontinued: bool;
    Category: NorthwindModel.Category;
    Order_Details: NorthwindModel.Order_Detail[];
    Supplier: NorthwindModel.Supplier;
    
  }

  export interface ProductQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Product) => bool): NorthwindModel.ProductQueryable;
    filter(predicate:(it: NorthwindModel.Product) => bool, thisArg: any): NorthwindModel.ProductQueryable;

    map(projection: (it: NorthwindModel.Product) => any): NorthwindModel.ProductQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Product) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Product[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Product[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Product, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Product) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Product, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Product[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.ProductQueryable;
    skip(amout: number): NorthwindModel.ProductQueryable;

    order(selector: string): NorthwindModel.ProductQueryable;
    orderBy(predicate: (it: NorthwindModel.Product) => any): NorthwindModel.ProductQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Product) => any): NorthwindModel.ProductQueryable;
    
    first(predicate: (it: NorthwindModel.Product, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Product) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Product, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Product[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.ProductQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface ProductSet extends ProductQueryable {
    add(initData: { ProductID?: number; ProductName?: string; SupplierID?: number; CategoryID?: number; QuantityPerUnit?: string; UnitPrice?: number; UnitsInStock?: number; UnitsOnOrder?: number; ReorderLevel?: number; Discontinued?: bool; Category?: NorthwindModel.Category; Order_Details?: NorthwindModel.Order_Detail[]; Supplier?: NorthwindModel.Supplier; }): NorthwindModel.Product;
    add(item: NorthwindModel.Product): NorthwindModel.Product;

    attach(item: NorthwindModel.Product): void;
    attach(item: { ProductID: number; }): void;
    attachOrGet(item: NorthwindModel.Product): NorthwindModel.Product;
    attachOrGet(item: { ProductID: number; }): NorthwindModel.Product;

    detach(item: NorthwindModel.Product): void;
    detach(item: { ProductID: number; }): void;

    remove(item: NorthwindModel.Product): void;
    remove(item: { ProductID: number; }): void;
    
    elementType: new (initData: { ProductID?: number; ProductName?: string; SupplierID?: number; CategoryID?: number; QuantityPerUnit?: string; UnitPrice?: number; UnitsInStock?: number; UnitsOnOrder?: number; ReorderLevel?: number; Discontinued?: bool; Category?: NorthwindModel.Category; Order_Details?: NorthwindModel.Order_Detail[]; Supplier?: NorthwindModel.Supplier; }) => NorthwindModel.Product;
  }

  class Region extends $data.Entity {
    constructor ();
    constructor (initData: { RegionID?: number; RegionDescription?: string; Territories?: NorthwindModel.Territory[]; });
    RegionID: number;
    RegionDescription: string;
    Territories: NorthwindModel.Territory[];
    
  }

  export interface RegionQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Region) => bool): NorthwindModel.RegionQueryable;
    filter(predicate:(it: NorthwindModel.Region) => bool, thisArg: any): NorthwindModel.RegionQueryable;

    map(projection: (it: NorthwindModel.Region) => any): NorthwindModel.RegionQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Region) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Region[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Region[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Region, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Region) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Region, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Region[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.RegionQueryable;
    skip(amout: number): NorthwindModel.RegionQueryable;

    order(selector: string): NorthwindModel.RegionQueryable;
    orderBy(predicate: (it: NorthwindModel.Region) => any): NorthwindModel.RegionQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Region) => any): NorthwindModel.RegionQueryable;
    
    first(predicate: (it: NorthwindModel.Region, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Region) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Region, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Region[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.RegionQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface RegionSet extends RegionQueryable {
    add(initData: { RegionID?: number; RegionDescription?: string; Territories?: NorthwindModel.Territory[]; }): NorthwindModel.Region;
    add(item: NorthwindModel.Region): NorthwindModel.Region;

    attach(item: NorthwindModel.Region): void;
    attach(item: { RegionID: number; }): void;
    attachOrGet(item: NorthwindModel.Region): NorthwindModel.Region;
    attachOrGet(item: { RegionID: number; }): NorthwindModel.Region;

    detach(item: NorthwindModel.Region): void;
    detach(item: { RegionID: number; }): void;

    remove(item: NorthwindModel.Region): void;
    remove(item: { RegionID: number; }): void;
    
    elementType: new (initData: { RegionID?: number; RegionDescription?: string; Territories?: NorthwindModel.Territory[]; }) => NorthwindModel.Region;
  }

  class Shipper extends $data.Entity {
    constructor ();
    constructor (initData: { ShipperID?: number; CompanyName?: string; Phone?: string; Orders?: NorthwindModel.Order[]; });
    ShipperID: number;
    CompanyName: string;
    Phone: string;
    Orders: NorthwindModel.Order[];
    
  }

  export interface ShipperQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Shipper) => bool): NorthwindModel.ShipperQueryable;
    filter(predicate:(it: NorthwindModel.Shipper) => bool, thisArg: any): NorthwindModel.ShipperQueryable;

    map(projection: (it: NorthwindModel.Shipper) => any): NorthwindModel.ShipperQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Shipper) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Shipper[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Shipper[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Shipper, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Shipper) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Shipper, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Shipper[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.ShipperQueryable;
    skip(amout: number): NorthwindModel.ShipperQueryable;

    order(selector: string): NorthwindModel.ShipperQueryable;
    orderBy(predicate: (it: NorthwindModel.Shipper) => any): NorthwindModel.ShipperQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Shipper) => any): NorthwindModel.ShipperQueryable;
    
    first(predicate: (it: NorthwindModel.Shipper, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Shipper) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Shipper, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Shipper[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.ShipperQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface ShipperSet extends ShipperQueryable {
    add(initData: { ShipperID?: number; CompanyName?: string; Phone?: string; Orders?: NorthwindModel.Order[]; }): NorthwindModel.Shipper;
    add(item: NorthwindModel.Shipper): NorthwindModel.Shipper;

    attach(item: NorthwindModel.Shipper): void;
    attach(item: { ShipperID: number; }): void;
    attachOrGet(item: NorthwindModel.Shipper): NorthwindModel.Shipper;
    attachOrGet(item: { ShipperID: number; }): NorthwindModel.Shipper;

    detach(item: NorthwindModel.Shipper): void;
    detach(item: { ShipperID: number; }): void;

    remove(item: NorthwindModel.Shipper): void;
    remove(item: { ShipperID: number; }): void;
    
    elementType: new (initData: { ShipperID?: number; CompanyName?: string; Phone?: string; Orders?: NorthwindModel.Order[]; }) => NorthwindModel.Shipper;
  }

  class Supplier extends $data.Entity {
    constructor ();
    constructor (initData: { SupplierID?: number; CompanyName?: string; ContactName?: string; ContactTitle?: string; Address?: string; City?: string; Region?: string; PostalCode?: string; Country?: string; Phone?: string; Fax?: string; HomePage?: string; Products?: NorthwindModel.Product[]; });
    SupplierID: number;
    CompanyName: string;
    ContactName: string;
    ContactTitle: string;
    Address: string;
    City: string;
    Region: string;
    PostalCode: string;
    Country: string;
    Phone: string;
    Fax: string;
    HomePage: string;
    Products: NorthwindModel.Product[];
    
  }

  export interface SupplierQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Supplier) => bool): NorthwindModel.SupplierQueryable;
    filter(predicate:(it: NorthwindModel.Supplier) => bool, thisArg: any): NorthwindModel.SupplierQueryable;

    map(projection: (it: NorthwindModel.Supplier) => any): NorthwindModel.SupplierQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Supplier) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Supplier[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Supplier[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Supplier, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Supplier) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Supplier, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Supplier[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.SupplierQueryable;
    skip(amout: number): NorthwindModel.SupplierQueryable;

    order(selector: string): NorthwindModel.SupplierQueryable;
    orderBy(predicate: (it: NorthwindModel.Supplier) => any): NorthwindModel.SupplierQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Supplier) => any): NorthwindModel.SupplierQueryable;
    
    first(predicate: (it: NorthwindModel.Supplier, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Supplier) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Supplier, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Supplier[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.SupplierQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface SupplierSet extends SupplierQueryable {
    add(initData: { SupplierID?: number; CompanyName?: string; ContactName?: string; ContactTitle?: string; Address?: string; City?: string; Region?: string; PostalCode?: string; Country?: string; Phone?: string; Fax?: string; HomePage?: string; Products?: NorthwindModel.Product[]; }): NorthwindModel.Supplier;
    add(item: NorthwindModel.Supplier): NorthwindModel.Supplier;

    attach(item: NorthwindModel.Supplier): void;
    attach(item: { SupplierID: number; }): void;
    attachOrGet(item: NorthwindModel.Supplier): NorthwindModel.Supplier;
    attachOrGet(item: { SupplierID: number; }): NorthwindModel.Supplier;

    detach(item: NorthwindModel.Supplier): void;
    detach(item: { SupplierID: number; }): void;

    remove(item: NorthwindModel.Supplier): void;
    remove(item: { SupplierID: number; }): void;
    
    elementType: new (initData: { SupplierID?: number; CompanyName?: string; ContactName?: string; ContactTitle?: string; Address?: string; City?: string; Region?: string; PostalCode?: string; Country?: string; Phone?: string; Fax?: string; HomePage?: string; Products?: NorthwindModel.Product[]; }) => NorthwindModel.Supplier;
  }

  class Territory extends $data.Entity {
    constructor ();
    constructor (initData: { TerritoryID?: string; TerritoryDescription?: string; RegionID?: number; Region?: NorthwindModel.Region; Employees?: NorthwindModel.Employee[]; });
    TerritoryID: string;
    TerritoryDescription: string;
    RegionID: number;
    Region: NorthwindModel.Region;
    Employees: NorthwindModel.Employee[];
    
  }

  export interface TerritoryQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Territory) => bool): NorthwindModel.TerritoryQueryable;
    filter(predicate:(it: NorthwindModel.Territory) => bool, thisArg: any): NorthwindModel.TerritoryQueryable;

    map(projection: (it: NorthwindModel.Territory) => any): NorthwindModel.TerritoryQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Territory) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Territory[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Territory[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Territory, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Territory) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Territory, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Territory[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.TerritoryQueryable;
    skip(amout: number): NorthwindModel.TerritoryQueryable;

    order(selector: string): NorthwindModel.TerritoryQueryable;
    orderBy(predicate: (it: NorthwindModel.Territory) => any): NorthwindModel.TerritoryQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Territory) => any): NorthwindModel.TerritoryQueryable;
    
    first(predicate: (it: NorthwindModel.Territory, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Territory) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Territory, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Territory[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.TerritoryQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface TerritorySet extends TerritoryQueryable {
    add(initData: { TerritoryID?: string; TerritoryDescription?: string; RegionID?: number; Region?: NorthwindModel.Region; Employees?: NorthwindModel.Employee[]; }): NorthwindModel.Territory;
    add(item: NorthwindModel.Territory): NorthwindModel.Territory;

    attach(item: NorthwindModel.Territory): void;
    attach(item: { TerritoryID: string; }): void;
    attachOrGet(item: NorthwindModel.Territory): NorthwindModel.Territory;
    attachOrGet(item: { TerritoryID: string; }): NorthwindModel.Territory;

    detach(item: NorthwindModel.Territory): void;
    detach(item: { TerritoryID: string; }): void;

    remove(item: NorthwindModel.Territory): void;
    remove(item: { TerritoryID: string; }): void;
    
    elementType: new (initData: { TerritoryID?: string; TerritoryDescription?: string; RegionID?: number; Region?: NorthwindModel.Region; Employees?: NorthwindModel.Employee[]; }) => NorthwindModel.Territory;
  }

  class Alphabetical_list_of_product extends $data.Entity {
    constructor ();
    constructor (initData: { ProductID?: number; ProductName?: string; SupplierID?: number; CategoryID?: number; QuantityPerUnit?: string; UnitPrice?: number; UnitsInStock?: number; UnitsOnOrder?: number; ReorderLevel?: number; Discontinued?: bool; CategoryName?: string; });
    ProductID: number;
    ProductName: string;
    SupplierID: number;
    CategoryID: number;
    QuantityPerUnit: string;
    UnitPrice: number;
    UnitsInStock: number;
    UnitsOnOrder: number;
    ReorderLevel: number;
    Discontinued: bool;
    CategoryName: string;
    
  }

  export interface Alphabetical_list_of_productQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Alphabetical_list_of_product) => bool): NorthwindModel.Alphabetical_list_of_productQueryable;
    filter(predicate:(it: NorthwindModel.Alphabetical_list_of_product) => bool, thisArg: any): NorthwindModel.Alphabetical_list_of_productQueryable;

    map(projection: (it: NorthwindModel.Alphabetical_list_of_product) => any): NorthwindModel.Alphabetical_list_of_productQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Alphabetical_list_of_product) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Alphabetical_list_of_product[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Alphabetical_list_of_product[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Alphabetical_list_of_product, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Alphabetical_list_of_product) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Alphabetical_list_of_product, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Alphabetical_list_of_product[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.Alphabetical_list_of_productQueryable;
    skip(amout: number): NorthwindModel.Alphabetical_list_of_productQueryable;

    order(selector: string): NorthwindModel.Alphabetical_list_of_productQueryable;
    orderBy(predicate: (it: NorthwindModel.Alphabetical_list_of_product) => any): NorthwindModel.Alphabetical_list_of_productQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Alphabetical_list_of_product) => any): NorthwindModel.Alphabetical_list_of_productQueryable;
    
    first(predicate: (it: NorthwindModel.Alphabetical_list_of_product, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Alphabetical_list_of_product) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Alphabetical_list_of_product, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Alphabetical_list_of_product[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.Alphabetical_list_of_productQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface Alphabetical_list_of_productSet extends Alphabetical_list_of_productQueryable {
    add(initData: { ProductID?: number; ProductName?: string; SupplierID?: number; CategoryID?: number; QuantityPerUnit?: string; UnitPrice?: number; UnitsInStock?: number; UnitsOnOrder?: number; ReorderLevel?: number; Discontinued?: bool; CategoryName?: string; }): NorthwindModel.Alphabetical_list_of_product;
    add(item: NorthwindModel.Alphabetical_list_of_product): NorthwindModel.Alphabetical_list_of_product;

    attach(item: NorthwindModel.Alphabetical_list_of_product): void;
    attach(item: { ProductID: number; ProductName: string; Discontinued: bool; CategoryName: string; }): void;
    attachOrGet(item: NorthwindModel.Alphabetical_list_of_product): NorthwindModel.Alphabetical_list_of_product;
    attachOrGet(item: { ProductID: number; ProductName: string; Discontinued: bool; CategoryName: string; }): NorthwindModel.Alphabetical_list_of_product;

    detach(item: NorthwindModel.Alphabetical_list_of_product): void;
    detach(item: { ProductID: number; ProductName: string; Discontinued: bool; CategoryName: string; }): void;

    remove(item: NorthwindModel.Alphabetical_list_of_product): void;
    remove(item: { ProductID: number; ProductName: string; Discontinued: bool; CategoryName: string; }): void;
    
    elementType: new (initData: { ProductID?: number; ProductName?: string; SupplierID?: number; CategoryID?: number; QuantityPerUnit?: string; UnitPrice?: number; UnitsInStock?: number; UnitsOnOrder?: number; ReorderLevel?: number; Discontinued?: bool; CategoryName?: string; }) => NorthwindModel.Alphabetical_list_of_product;
  }

  class Category_Sales_for_1997 extends $data.Entity {
    constructor ();
    constructor (initData: { CategoryName?: string; CategorySales?: number; });
    CategoryName: string;
    CategorySales: number;
    
  }

  export interface Category_Sales_for_1997Queryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Category_Sales_for_1997) => bool): NorthwindModel.Category_Sales_for_1997Queryable;
    filter(predicate:(it: NorthwindModel.Category_Sales_for_1997) => bool, thisArg: any): NorthwindModel.Category_Sales_for_1997Queryable;

    map(projection: (it: NorthwindModel.Category_Sales_for_1997) => any): NorthwindModel.Category_Sales_for_1997Queryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Category_Sales_for_1997) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Category_Sales_for_1997[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Category_Sales_for_1997[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Category_Sales_for_1997, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Category_Sales_for_1997) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Category_Sales_for_1997, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Category_Sales_for_1997[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.Category_Sales_for_1997Queryable;
    skip(amout: number): NorthwindModel.Category_Sales_for_1997Queryable;

    order(selector: string): NorthwindModel.Category_Sales_for_1997Queryable;
    orderBy(predicate: (it: NorthwindModel.Category_Sales_for_1997) => any): NorthwindModel.Category_Sales_for_1997Queryable;
    orderByDescending(predicate: (it: NorthwindModel.Category_Sales_for_1997) => any): NorthwindModel.Category_Sales_for_1997Queryable;
    
    first(predicate: (it: NorthwindModel.Category_Sales_for_1997, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Category_Sales_for_1997) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Category_Sales_for_1997, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Category_Sales_for_1997[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.Category_Sales_for_1997Queryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface Category_Sales_for_1997Set extends Category_Sales_for_1997Queryable {
    add(initData: { CategoryName?: string; CategorySales?: number; }): NorthwindModel.Category_Sales_for_1997;
    add(item: NorthwindModel.Category_Sales_for_1997): NorthwindModel.Category_Sales_for_1997;

    attach(item: NorthwindModel.Category_Sales_for_1997): void;
    attach(item: { CategoryName: string; }): void;
    attachOrGet(item: NorthwindModel.Category_Sales_for_1997): NorthwindModel.Category_Sales_for_1997;
    attachOrGet(item: { CategoryName: string; }): NorthwindModel.Category_Sales_for_1997;

    detach(item: NorthwindModel.Category_Sales_for_1997): void;
    detach(item: { CategoryName: string; }): void;

    remove(item: NorthwindModel.Category_Sales_for_1997): void;
    remove(item: { CategoryName: string; }): void;
    
    elementType: new (initData: { CategoryName?: string; CategorySales?: number; }) => NorthwindModel.Category_Sales_for_1997;
  }

  class Current_Product_List extends $data.Entity {
    constructor ();
    constructor (initData: { ProductID?: number; ProductName?: string; });
    ProductID: number;
    ProductName: string;
    
  }

  export interface Current_Product_ListQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Current_Product_List) => bool): NorthwindModel.Current_Product_ListQueryable;
    filter(predicate:(it: NorthwindModel.Current_Product_List) => bool, thisArg: any): NorthwindModel.Current_Product_ListQueryable;

    map(projection: (it: NorthwindModel.Current_Product_List) => any): NorthwindModel.Current_Product_ListQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Current_Product_List) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Current_Product_List[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Current_Product_List[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Current_Product_List, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Current_Product_List) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Current_Product_List, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Current_Product_List[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.Current_Product_ListQueryable;
    skip(amout: number): NorthwindModel.Current_Product_ListQueryable;

    order(selector: string): NorthwindModel.Current_Product_ListQueryable;
    orderBy(predicate: (it: NorthwindModel.Current_Product_List) => any): NorthwindModel.Current_Product_ListQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Current_Product_List) => any): NorthwindModel.Current_Product_ListQueryable;
    
    first(predicate: (it: NorthwindModel.Current_Product_List, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Current_Product_List) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Current_Product_List, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Current_Product_List[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.Current_Product_ListQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface Current_Product_ListSet extends Current_Product_ListQueryable {
    add(initData: { ProductID?: number; ProductName?: string; }): NorthwindModel.Current_Product_List;
    add(item: NorthwindModel.Current_Product_List): NorthwindModel.Current_Product_List;

    attach(item: NorthwindModel.Current_Product_List): void;
    attach(item: { ProductID: number; ProductName: string; }): void;
    attachOrGet(item: NorthwindModel.Current_Product_List): NorthwindModel.Current_Product_List;
    attachOrGet(item: { ProductID: number; ProductName: string; }): NorthwindModel.Current_Product_List;

    detach(item: NorthwindModel.Current_Product_List): void;
    detach(item: { ProductID: number; ProductName: string; }): void;

    remove(item: NorthwindModel.Current_Product_List): void;
    remove(item: { ProductID: number; ProductName: string; }): void;
    
    elementType: new (initData: { ProductID?: number; ProductName?: string; }) => NorthwindModel.Current_Product_List;
  }

  class Customer_and_Suppliers_by_City extends $data.Entity {
    constructor ();
    constructor (initData: { City?: string; CompanyName?: string; ContactName?: string; Relationship?: string; });
    City: string;
    CompanyName: string;
    ContactName: string;
    Relationship: string;
    
  }

  export interface Customer_and_Suppliers_by_CityQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Customer_and_Suppliers_by_City) => bool): NorthwindModel.Customer_and_Suppliers_by_CityQueryable;
    filter(predicate:(it: NorthwindModel.Customer_and_Suppliers_by_City) => bool, thisArg: any): NorthwindModel.Customer_and_Suppliers_by_CityQueryable;

    map(projection: (it: NorthwindModel.Customer_and_Suppliers_by_City) => any): NorthwindModel.Customer_and_Suppliers_by_CityQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Customer_and_Suppliers_by_City) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Customer_and_Suppliers_by_City[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Customer_and_Suppliers_by_City[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Customer_and_Suppliers_by_City, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Customer_and_Suppliers_by_City) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Customer_and_Suppliers_by_City, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Customer_and_Suppliers_by_City[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.Customer_and_Suppliers_by_CityQueryable;
    skip(amout: number): NorthwindModel.Customer_and_Suppliers_by_CityQueryable;

    order(selector: string): NorthwindModel.Customer_and_Suppliers_by_CityQueryable;
    orderBy(predicate: (it: NorthwindModel.Customer_and_Suppliers_by_City) => any): NorthwindModel.Customer_and_Suppliers_by_CityQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Customer_and_Suppliers_by_City) => any): NorthwindModel.Customer_and_Suppliers_by_CityQueryable;
    
    first(predicate: (it: NorthwindModel.Customer_and_Suppliers_by_City, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Customer_and_Suppliers_by_City) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Customer_and_Suppliers_by_City, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Customer_and_Suppliers_by_City[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.Customer_and_Suppliers_by_CityQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface Customer_and_Suppliers_by_CitySet extends Customer_and_Suppliers_by_CityQueryable {
    add(initData: { City?: string; CompanyName?: string; ContactName?: string; Relationship?: string; }): NorthwindModel.Customer_and_Suppliers_by_City;
    add(item: NorthwindModel.Customer_and_Suppliers_by_City): NorthwindModel.Customer_and_Suppliers_by_City;

    attach(item: NorthwindModel.Customer_and_Suppliers_by_City): void;
    attach(item: { CompanyName: string; Relationship: string; }): void;
    attachOrGet(item: NorthwindModel.Customer_and_Suppliers_by_City): NorthwindModel.Customer_and_Suppliers_by_City;
    attachOrGet(item: { CompanyName: string; Relationship: string; }): NorthwindModel.Customer_and_Suppliers_by_City;

    detach(item: NorthwindModel.Customer_and_Suppliers_by_City): void;
    detach(item: { CompanyName: string; Relationship: string; }): void;

    remove(item: NorthwindModel.Customer_and_Suppliers_by_City): void;
    remove(item: { CompanyName: string; Relationship: string; }): void;
    
    elementType: new (initData: { City?: string; CompanyName?: string; ContactName?: string; Relationship?: string; }) => NorthwindModel.Customer_and_Suppliers_by_City;
  }

  class Invoice extends $data.Entity {
    constructor ();
    constructor (initData: { ShipName?: string; ShipAddress?: string; ShipCity?: string; ShipRegion?: string; ShipPostalCode?: string; ShipCountry?: string; CustomerID?: string; CustomerName?: string; Address?: string; City?: string; Region?: string; PostalCode?: string; Country?: string; Salesperson?: string; OrderID?: number; OrderDate?: Date; RequiredDate?: Date; ShippedDate?: Date; ShipperName?: string; ProductID?: number; ProductName?: string; UnitPrice?: number; Quantity?: number; Discount?: number; ExtendedPrice?: number; Freight?: number; });
    ShipName: string;
    ShipAddress: string;
    ShipCity: string;
    ShipRegion: string;
    ShipPostalCode: string;
    ShipCountry: string;
    CustomerID: string;
    CustomerName: string;
    Address: string;
    City: string;
    Region: string;
    PostalCode: string;
    Country: string;
    Salesperson: string;
    OrderID: number;
    OrderDate: Date;
    RequiredDate: Date;
    ShippedDate: Date;
    ShipperName: string;
    ProductID: number;
    ProductName: string;
    UnitPrice: number;
    Quantity: number;
    Discount: number;
    ExtendedPrice: number;
    Freight: number;
    
  }

  export interface InvoiceQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Invoice) => bool): NorthwindModel.InvoiceQueryable;
    filter(predicate:(it: NorthwindModel.Invoice) => bool, thisArg: any): NorthwindModel.InvoiceQueryable;

    map(projection: (it: NorthwindModel.Invoice) => any): NorthwindModel.InvoiceQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Invoice) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Invoice[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Invoice[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Invoice, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Invoice) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Invoice, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Invoice[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.InvoiceQueryable;
    skip(amout: number): NorthwindModel.InvoiceQueryable;

    order(selector: string): NorthwindModel.InvoiceQueryable;
    orderBy(predicate: (it: NorthwindModel.Invoice) => any): NorthwindModel.InvoiceQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Invoice) => any): NorthwindModel.InvoiceQueryable;
    
    first(predicate: (it: NorthwindModel.Invoice, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Invoice) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Invoice, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Invoice[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.InvoiceQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface InvoiceSet extends InvoiceQueryable {
    add(initData: { ShipName?: string; ShipAddress?: string; ShipCity?: string; ShipRegion?: string; ShipPostalCode?: string; ShipCountry?: string; CustomerID?: string; CustomerName?: string; Address?: string; City?: string; Region?: string; PostalCode?: string; Country?: string; Salesperson?: string; OrderID?: number; OrderDate?: Date; RequiredDate?: Date; ShippedDate?: Date; ShipperName?: string; ProductID?: number; ProductName?: string; UnitPrice?: number; Quantity?: number; Discount?: number; ExtendedPrice?: number; Freight?: number; }): NorthwindModel.Invoice;
    add(item: NorthwindModel.Invoice): NorthwindModel.Invoice;

    attach(item: NorthwindModel.Invoice): void;
    attach(item: { CustomerName: string; Salesperson: string; OrderID: number; ShipperName: string; ProductID: number; ProductName: string; UnitPrice: number; Quantity: number; Discount: number; }): void;
    attachOrGet(item: NorthwindModel.Invoice): NorthwindModel.Invoice;
    attachOrGet(item: { CustomerName: string; Salesperson: string; OrderID: number; ShipperName: string; ProductID: number; ProductName: string; UnitPrice: number; Quantity: number; Discount: number; }): NorthwindModel.Invoice;

    detach(item: NorthwindModel.Invoice): void;
    detach(item: { CustomerName: string; Salesperson: string; OrderID: number; ShipperName: string; ProductID: number; ProductName: string; UnitPrice: number; Quantity: number; Discount: number; }): void;

    remove(item: NorthwindModel.Invoice): void;
    remove(item: { CustomerName: string; Salesperson: string; OrderID: number; ShipperName: string; ProductID: number; ProductName: string; UnitPrice: number; Quantity: number; Discount: number; }): void;
    
    elementType: new (initData: { ShipName?: string; ShipAddress?: string; ShipCity?: string; ShipRegion?: string; ShipPostalCode?: string; ShipCountry?: string; CustomerID?: string; CustomerName?: string; Address?: string; City?: string; Region?: string; PostalCode?: string; Country?: string; Salesperson?: string; OrderID?: number; OrderDate?: Date; RequiredDate?: Date; ShippedDate?: Date; ShipperName?: string; ProductID?: number; ProductName?: string; UnitPrice?: number; Quantity?: number; Discount?: number; ExtendedPrice?: number; Freight?: number; }) => NorthwindModel.Invoice;
  }

  class Order_Details_Extended extends $data.Entity {
    constructor ();
    constructor (initData: { OrderID?: number; ProductID?: number; ProductName?: string; UnitPrice?: number; Quantity?: number; Discount?: number; ExtendedPrice?: number; });
    OrderID: number;
    ProductID: number;
    ProductName: string;
    UnitPrice: number;
    Quantity: number;
    Discount: number;
    ExtendedPrice: number;
    
  }

  export interface Order_Details_ExtendedQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Order_Details_Extended) => bool): NorthwindModel.Order_Details_ExtendedQueryable;
    filter(predicate:(it: NorthwindModel.Order_Details_Extended) => bool, thisArg: any): NorthwindModel.Order_Details_ExtendedQueryable;

    map(projection: (it: NorthwindModel.Order_Details_Extended) => any): NorthwindModel.Order_Details_ExtendedQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Order_Details_Extended) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Order_Details_Extended[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Order_Details_Extended[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Order_Details_Extended, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Order_Details_Extended) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Order_Details_Extended, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Order_Details_Extended[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.Order_Details_ExtendedQueryable;
    skip(amout: number): NorthwindModel.Order_Details_ExtendedQueryable;

    order(selector: string): NorthwindModel.Order_Details_ExtendedQueryable;
    orderBy(predicate: (it: NorthwindModel.Order_Details_Extended) => any): NorthwindModel.Order_Details_ExtendedQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Order_Details_Extended) => any): NorthwindModel.Order_Details_ExtendedQueryable;
    
    first(predicate: (it: NorthwindModel.Order_Details_Extended, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Order_Details_Extended) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Order_Details_Extended, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Order_Details_Extended[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.Order_Details_ExtendedQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface Order_Details_ExtendedSet extends Order_Details_ExtendedQueryable {
    add(initData: { OrderID?: number; ProductID?: number; ProductName?: string; UnitPrice?: number; Quantity?: number; Discount?: number; ExtendedPrice?: number; }): NorthwindModel.Order_Details_Extended;
    add(item: NorthwindModel.Order_Details_Extended): NorthwindModel.Order_Details_Extended;

    attach(item: NorthwindModel.Order_Details_Extended): void;
    attach(item: { OrderID: number; ProductID: number; ProductName: string; UnitPrice: number; Quantity: number; Discount: number; }): void;
    attachOrGet(item: NorthwindModel.Order_Details_Extended): NorthwindModel.Order_Details_Extended;
    attachOrGet(item: { OrderID: number; ProductID: number; ProductName: string; UnitPrice: number; Quantity: number; Discount: number; }): NorthwindModel.Order_Details_Extended;

    detach(item: NorthwindModel.Order_Details_Extended): void;
    detach(item: { OrderID: number; ProductID: number; ProductName: string; UnitPrice: number; Quantity: number; Discount: number; }): void;

    remove(item: NorthwindModel.Order_Details_Extended): void;
    remove(item: { OrderID: number; ProductID: number; ProductName: string; UnitPrice: number; Quantity: number; Discount: number; }): void;
    
    elementType: new (initData: { OrderID?: number; ProductID?: number; ProductName?: string; UnitPrice?: number; Quantity?: number; Discount?: number; ExtendedPrice?: number; }) => NorthwindModel.Order_Details_Extended;
  }

  class Order_Subtotal extends $data.Entity {
    constructor ();
    constructor (initData: { OrderID?: number; Subtotal?: number; });
    OrderID: number;
    Subtotal: number;
    
  }

  export interface Order_SubtotalQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Order_Subtotal) => bool): NorthwindModel.Order_SubtotalQueryable;
    filter(predicate:(it: NorthwindModel.Order_Subtotal) => bool, thisArg: any): NorthwindModel.Order_SubtotalQueryable;

    map(projection: (it: NorthwindModel.Order_Subtotal) => any): NorthwindModel.Order_SubtotalQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Order_Subtotal) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Order_Subtotal[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Order_Subtotal[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Order_Subtotal, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Order_Subtotal) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Order_Subtotal, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Order_Subtotal[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.Order_SubtotalQueryable;
    skip(amout: number): NorthwindModel.Order_SubtotalQueryable;

    order(selector: string): NorthwindModel.Order_SubtotalQueryable;
    orderBy(predicate: (it: NorthwindModel.Order_Subtotal) => any): NorthwindModel.Order_SubtotalQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Order_Subtotal) => any): NorthwindModel.Order_SubtotalQueryable;
    
    first(predicate: (it: NorthwindModel.Order_Subtotal, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Order_Subtotal) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Order_Subtotal, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Order_Subtotal[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.Order_SubtotalQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface Order_SubtotalSet extends Order_SubtotalQueryable {
    add(initData: { OrderID?: number; Subtotal?: number; }): NorthwindModel.Order_Subtotal;
    add(item: NorthwindModel.Order_Subtotal): NorthwindModel.Order_Subtotal;

    attach(item: NorthwindModel.Order_Subtotal): void;
    attach(item: { OrderID: number; }): void;
    attachOrGet(item: NorthwindModel.Order_Subtotal): NorthwindModel.Order_Subtotal;
    attachOrGet(item: { OrderID: number; }): NorthwindModel.Order_Subtotal;

    detach(item: NorthwindModel.Order_Subtotal): void;
    detach(item: { OrderID: number; }): void;

    remove(item: NorthwindModel.Order_Subtotal): void;
    remove(item: { OrderID: number; }): void;
    
    elementType: new (initData: { OrderID?: number; Subtotal?: number; }) => NorthwindModel.Order_Subtotal;
  }

  class Orders_Qry extends $data.Entity {
    constructor ();
    constructor (initData: { OrderID?: number; CustomerID?: string; EmployeeID?: number; OrderDate?: Date; RequiredDate?: Date; ShippedDate?: Date; ShipVia?: number; Freight?: number; ShipName?: string; ShipAddress?: string; ShipCity?: string; ShipRegion?: string; ShipPostalCode?: string; ShipCountry?: string; CompanyName?: string; Address?: string; City?: string; Region?: string; PostalCode?: string; Country?: string; });
    OrderID: number;
    CustomerID: string;
    EmployeeID: number;
    OrderDate: Date;
    RequiredDate: Date;
    ShippedDate: Date;
    ShipVia: number;
    Freight: number;
    ShipName: string;
    ShipAddress: string;
    ShipCity: string;
    ShipRegion: string;
    ShipPostalCode: string;
    ShipCountry: string;
    CompanyName: string;
    Address: string;
    City: string;
    Region: string;
    PostalCode: string;
    Country: string;
    
  }

  export interface Orders_QryQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Orders_Qry) => bool): NorthwindModel.Orders_QryQueryable;
    filter(predicate:(it: NorthwindModel.Orders_Qry) => bool, thisArg: any): NorthwindModel.Orders_QryQueryable;

    map(projection: (it: NorthwindModel.Orders_Qry) => any): NorthwindModel.Orders_QryQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Orders_Qry) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Orders_Qry[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Orders_Qry[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Orders_Qry, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Orders_Qry) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Orders_Qry, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Orders_Qry[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.Orders_QryQueryable;
    skip(amout: number): NorthwindModel.Orders_QryQueryable;

    order(selector: string): NorthwindModel.Orders_QryQueryable;
    orderBy(predicate: (it: NorthwindModel.Orders_Qry) => any): NorthwindModel.Orders_QryQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Orders_Qry) => any): NorthwindModel.Orders_QryQueryable;
    
    first(predicate: (it: NorthwindModel.Orders_Qry, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Orders_Qry) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Orders_Qry, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Orders_Qry[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.Orders_QryQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface Orders_QrySet extends Orders_QryQueryable {
    add(initData: { OrderID?: number; CustomerID?: string; EmployeeID?: number; OrderDate?: Date; RequiredDate?: Date; ShippedDate?: Date; ShipVia?: number; Freight?: number; ShipName?: string; ShipAddress?: string; ShipCity?: string; ShipRegion?: string; ShipPostalCode?: string; ShipCountry?: string; CompanyName?: string; Address?: string; City?: string; Region?: string; PostalCode?: string; Country?: string; }): NorthwindModel.Orders_Qry;
    add(item: NorthwindModel.Orders_Qry): NorthwindModel.Orders_Qry;

    attach(item: NorthwindModel.Orders_Qry): void;
    attach(item: { OrderID: number; CompanyName: string; }): void;
    attachOrGet(item: NorthwindModel.Orders_Qry): NorthwindModel.Orders_Qry;
    attachOrGet(item: { OrderID: number; CompanyName: string; }): NorthwindModel.Orders_Qry;

    detach(item: NorthwindModel.Orders_Qry): void;
    detach(item: { OrderID: number; CompanyName: string; }): void;

    remove(item: NorthwindModel.Orders_Qry): void;
    remove(item: { OrderID: number; CompanyName: string; }): void;
    
    elementType: new (initData: { OrderID?: number; CustomerID?: string; EmployeeID?: number; OrderDate?: Date; RequiredDate?: Date; ShippedDate?: Date; ShipVia?: number; Freight?: number; ShipName?: string; ShipAddress?: string; ShipCity?: string; ShipRegion?: string; ShipPostalCode?: string; ShipCountry?: string; CompanyName?: string; Address?: string; City?: string; Region?: string; PostalCode?: string; Country?: string; }) => NorthwindModel.Orders_Qry;
  }

  class Product_Sales_for_1997 extends $data.Entity {
    constructor ();
    constructor (initData: { CategoryName?: string; ProductName?: string; ProductSales?: number; });
    CategoryName: string;
    ProductName: string;
    ProductSales: number;
    
  }

  export interface Product_Sales_for_1997Queryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Product_Sales_for_1997) => bool): NorthwindModel.Product_Sales_for_1997Queryable;
    filter(predicate:(it: NorthwindModel.Product_Sales_for_1997) => bool, thisArg: any): NorthwindModel.Product_Sales_for_1997Queryable;

    map(projection: (it: NorthwindModel.Product_Sales_for_1997) => any): NorthwindModel.Product_Sales_for_1997Queryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Product_Sales_for_1997) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Product_Sales_for_1997[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Product_Sales_for_1997[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Product_Sales_for_1997, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Product_Sales_for_1997) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Product_Sales_for_1997, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Product_Sales_for_1997[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.Product_Sales_for_1997Queryable;
    skip(amout: number): NorthwindModel.Product_Sales_for_1997Queryable;

    order(selector: string): NorthwindModel.Product_Sales_for_1997Queryable;
    orderBy(predicate: (it: NorthwindModel.Product_Sales_for_1997) => any): NorthwindModel.Product_Sales_for_1997Queryable;
    orderByDescending(predicate: (it: NorthwindModel.Product_Sales_for_1997) => any): NorthwindModel.Product_Sales_for_1997Queryable;
    
    first(predicate: (it: NorthwindModel.Product_Sales_for_1997, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Product_Sales_for_1997) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Product_Sales_for_1997, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Product_Sales_for_1997[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.Product_Sales_for_1997Queryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface Product_Sales_for_1997Set extends Product_Sales_for_1997Queryable {
    add(initData: { CategoryName?: string; ProductName?: string; ProductSales?: number; }): NorthwindModel.Product_Sales_for_1997;
    add(item: NorthwindModel.Product_Sales_for_1997): NorthwindModel.Product_Sales_for_1997;

    attach(item: NorthwindModel.Product_Sales_for_1997): void;
    attach(item: { CategoryName: string; ProductName: string; }): void;
    attachOrGet(item: NorthwindModel.Product_Sales_for_1997): NorthwindModel.Product_Sales_for_1997;
    attachOrGet(item: { CategoryName: string; ProductName: string; }): NorthwindModel.Product_Sales_for_1997;

    detach(item: NorthwindModel.Product_Sales_for_1997): void;
    detach(item: { CategoryName: string; ProductName: string; }): void;

    remove(item: NorthwindModel.Product_Sales_for_1997): void;
    remove(item: { CategoryName: string; ProductName: string; }): void;
    
    elementType: new (initData: { CategoryName?: string; ProductName?: string; ProductSales?: number; }) => NorthwindModel.Product_Sales_for_1997;
  }

  class Products_Above_Average_Price extends $data.Entity {
    constructor ();
    constructor (initData: { ProductName?: string; UnitPrice?: number; });
    ProductName: string;
    UnitPrice: number;
    
  }

  export interface Products_Above_Average_PriceQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Products_Above_Average_Price) => bool): NorthwindModel.Products_Above_Average_PriceQueryable;
    filter(predicate:(it: NorthwindModel.Products_Above_Average_Price) => bool, thisArg: any): NorthwindModel.Products_Above_Average_PriceQueryable;

    map(projection: (it: NorthwindModel.Products_Above_Average_Price) => any): NorthwindModel.Products_Above_Average_PriceQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Products_Above_Average_Price) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Products_Above_Average_Price[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Products_Above_Average_Price[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Products_Above_Average_Price, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Products_Above_Average_Price) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Products_Above_Average_Price, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Products_Above_Average_Price[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.Products_Above_Average_PriceQueryable;
    skip(amout: number): NorthwindModel.Products_Above_Average_PriceQueryable;

    order(selector: string): NorthwindModel.Products_Above_Average_PriceQueryable;
    orderBy(predicate: (it: NorthwindModel.Products_Above_Average_Price) => any): NorthwindModel.Products_Above_Average_PriceQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Products_Above_Average_Price) => any): NorthwindModel.Products_Above_Average_PriceQueryable;
    
    first(predicate: (it: NorthwindModel.Products_Above_Average_Price, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Products_Above_Average_Price) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Products_Above_Average_Price, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Products_Above_Average_Price[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.Products_Above_Average_PriceQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface Products_Above_Average_PriceSet extends Products_Above_Average_PriceQueryable {
    add(initData: { ProductName?: string; UnitPrice?: number; }): NorthwindModel.Products_Above_Average_Price;
    add(item: NorthwindModel.Products_Above_Average_Price): NorthwindModel.Products_Above_Average_Price;

    attach(item: NorthwindModel.Products_Above_Average_Price): void;
    attach(item: { ProductName: string; }): void;
    attachOrGet(item: NorthwindModel.Products_Above_Average_Price): NorthwindModel.Products_Above_Average_Price;
    attachOrGet(item: { ProductName: string; }): NorthwindModel.Products_Above_Average_Price;

    detach(item: NorthwindModel.Products_Above_Average_Price): void;
    detach(item: { ProductName: string; }): void;

    remove(item: NorthwindModel.Products_Above_Average_Price): void;
    remove(item: { ProductName: string; }): void;
    
    elementType: new (initData: { ProductName?: string; UnitPrice?: number; }) => NorthwindModel.Products_Above_Average_Price;
  }

  class Products_by_Category extends $data.Entity {
    constructor ();
    constructor (initData: { CategoryName?: string; ProductName?: string; QuantityPerUnit?: string; UnitsInStock?: number; Discontinued?: bool; });
    CategoryName: string;
    ProductName: string;
    QuantityPerUnit: string;
    UnitsInStock: number;
    Discontinued: bool;
    
  }

  export interface Products_by_CategoryQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Products_by_Category) => bool): NorthwindModel.Products_by_CategoryQueryable;
    filter(predicate:(it: NorthwindModel.Products_by_Category) => bool, thisArg: any): NorthwindModel.Products_by_CategoryQueryable;

    map(projection: (it: NorthwindModel.Products_by_Category) => any): NorthwindModel.Products_by_CategoryQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Products_by_Category) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Products_by_Category[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Products_by_Category[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Products_by_Category, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Products_by_Category) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Products_by_Category, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Products_by_Category[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.Products_by_CategoryQueryable;
    skip(amout: number): NorthwindModel.Products_by_CategoryQueryable;

    order(selector: string): NorthwindModel.Products_by_CategoryQueryable;
    orderBy(predicate: (it: NorthwindModel.Products_by_Category) => any): NorthwindModel.Products_by_CategoryQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Products_by_Category) => any): NorthwindModel.Products_by_CategoryQueryable;
    
    first(predicate: (it: NorthwindModel.Products_by_Category, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Products_by_Category) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Products_by_Category, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Products_by_Category[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.Products_by_CategoryQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface Products_by_CategorySet extends Products_by_CategoryQueryable {
    add(initData: { CategoryName?: string; ProductName?: string; QuantityPerUnit?: string; UnitsInStock?: number; Discontinued?: bool; }): NorthwindModel.Products_by_Category;
    add(item: NorthwindModel.Products_by_Category): NorthwindModel.Products_by_Category;

    attach(item: NorthwindModel.Products_by_Category): void;
    attach(item: { CategoryName: string; ProductName: string; Discontinued: bool; }): void;
    attachOrGet(item: NorthwindModel.Products_by_Category): NorthwindModel.Products_by_Category;
    attachOrGet(item: { CategoryName: string; ProductName: string; Discontinued: bool; }): NorthwindModel.Products_by_Category;

    detach(item: NorthwindModel.Products_by_Category): void;
    detach(item: { CategoryName: string; ProductName: string; Discontinued: bool; }): void;

    remove(item: NorthwindModel.Products_by_Category): void;
    remove(item: { CategoryName: string; ProductName: string; Discontinued: bool; }): void;
    
    elementType: new (initData: { CategoryName?: string; ProductName?: string; QuantityPerUnit?: string; UnitsInStock?: number; Discontinued?: bool; }) => NorthwindModel.Products_by_Category;
  }

  class Sales_by_Category extends $data.Entity {
    constructor ();
    constructor (initData: { CategoryID?: number; CategoryName?: string; ProductName?: string; ProductSales?: number; });
    CategoryID: number;
    CategoryName: string;
    ProductName: string;
    ProductSales: number;
    
  }

  export interface Sales_by_CategoryQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Sales_by_Category) => bool): NorthwindModel.Sales_by_CategoryQueryable;
    filter(predicate:(it: NorthwindModel.Sales_by_Category) => bool, thisArg: any): NorthwindModel.Sales_by_CategoryQueryable;

    map(projection: (it: NorthwindModel.Sales_by_Category) => any): NorthwindModel.Sales_by_CategoryQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Sales_by_Category) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Sales_by_Category[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Sales_by_Category[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Sales_by_Category, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Sales_by_Category) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Sales_by_Category, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Sales_by_Category[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.Sales_by_CategoryQueryable;
    skip(amout: number): NorthwindModel.Sales_by_CategoryQueryable;

    order(selector: string): NorthwindModel.Sales_by_CategoryQueryable;
    orderBy(predicate: (it: NorthwindModel.Sales_by_Category) => any): NorthwindModel.Sales_by_CategoryQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Sales_by_Category) => any): NorthwindModel.Sales_by_CategoryQueryable;
    
    first(predicate: (it: NorthwindModel.Sales_by_Category, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Sales_by_Category) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Sales_by_Category, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Sales_by_Category[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.Sales_by_CategoryQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface Sales_by_CategorySet extends Sales_by_CategoryQueryable {
    add(initData: { CategoryID?: number; CategoryName?: string; ProductName?: string; ProductSales?: number; }): NorthwindModel.Sales_by_Category;
    add(item: NorthwindModel.Sales_by_Category): NorthwindModel.Sales_by_Category;

    attach(item: NorthwindModel.Sales_by_Category): void;
    attach(item: { CategoryID: number; CategoryName: string; ProductName: string; }): void;
    attachOrGet(item: NorthwindModel.Sales_by_Category): NorthwindModel.Sales_by_Category;
    attachOrGet(item: { CategoryID: number; CategoryName: string; ProductName: string; }): NorthwindModel.Sales_by_Category;

    detach(item: NorthwindModel.Sales_by_Category): void;
    detach(item: { CategoryID: number; CategoryName: string; ProductName: string; }): void;

    remove(item: NorthwindModel.Sales_by_Category): void;
    remove(item: { CategoryID: number; CategoryName: string; ProductName: string; }): void;
    
    elementType: new (initData: { CategoryID?: number; CategoryName?: string; ProductName?: string; ProductSales?: number; }) => NorthwindModel.Sales_by_Category;
  }

  class Sales_Totals_by_Amount extends $data.Entity {
    constructor ();
    constructor (initData: { SaleAmount?: number; OrderID?: number; CompanyName?: string; ShippedDate?: Date; });
    SaleAmount: number;
    OrderID: number;
    CompanyName: string;
    ShippedDate: Date;
    
  }

  export interface Sales_Totals_by_AmountQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Sales_Totals_by_Amount) => bool): NorthwindModel.Sales_Totals_by_AmountQueryable;
    filter(predicate:(it: NorthwindModel.Sales_Totals_by_Amount) => bool, thisArg: any): NorthwindModel.Sales_Totals_by_AmountQueryable;

    map(projection: (it: NorthwindModel.Sales_Totals_by_Amount) => any): NorthwindModel.Sales_Totals_by_AmountQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Sales_Totals_by_Amount) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Sales_Totals_by_Amount[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Sales_Totals_by_Amount[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Sales_Totals_by_Amount, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Sales_Totals_by_Amount) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Sales_Totals_by_Amount, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Sales_Totals_by_Amount[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.Sales_Totals_by_AmountQueryable;
    skip(amout: number): NorthwindModel.Sales_Totals_by_AmountQueryable;

    order(selector: string): NorthwindModel.Sales_Totals_by_AmountQueryable;
    orderBy(predicate: (it: NorthwindModel.Sales_Totals_by_Amount) => any): NorthwindModel.Sales_Totals_by_AmountQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Sales_Totals_by_Amount) => any): NorthwindModel.Sales_Totals_by_AmountQueryable;
    
    first(predicate: (it: NorthwindModel.Sales_Totals_by_Amount, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Sales_Totals_by_Amount) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Sales_Totals_by_Amount, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Sales_Totals_by_Amount[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.Sales_Totals_by_AmountQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface Sales_Totals_by_AmountSet extends Sales_Totals_by_AmountQueryable {
    add(initData: { SaleAmount?: number; OrderID?: number; CompanyName?: string; ShippedDate?: Date; }): NorthwindModel.Sales_Totals_by_Amount;
    add(item: NorthwindModel.Sales_Totals_by_Amount): NorthwindModel.Sales_Totals_by_Amount;

    attach(item: NorthwindModel.Sales_Totals_by_Amount): void;
    attach(item: { OrderID: number; CompanyName: string; }): void;
    attachOrGet(item: NorthwindModel.Sales_Totals_by_Amount): NorthwindModel.Sales_Totals_by_Amount;
    attachOrGet(item: { OrderID: number; CompanyName: string; }): NorthwindModel.Sales_Totals_by_Amount;

    detach(item: NorthwindModel.Sales_Totals_by_Amount): void;
    detach(item: { OrderID: number; CompanyName: string; }): void;

    remove(item: NorthwindModel.Sales_Totals_by_Amount): void;
    remove(item: { OrderID: number; CompanyName: string; }): void;
    
    elementType: new (initData: { SaleAmount?: number; OrderID?: number; CompanyName?: string; ShippedDate?: Date; }) => NorthwindModel.Sales_Totals_by_Amount;
  }

  class Summary_of_Sales_by_Quarter extends $data.Entity {
    constructor ();
    constructor (initData: { ShippedDate?: Date; OrderID?: number; Subtotal?: number; });
    ShippedDate: Date;
    OrderID: number;
    Subtotal: number;
    
  }

  export interface Summary_of_Sales_by_QuarterQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Summary_of_Sales_by_Quarter) => bool): NorthwindModel.Summary_of_Sales_by_QuarterQueryable;
    filter(predicate:(it: NorthwindModel.Summary_of_Sales_by_Quarter) => bool, thisArg: any): NorthwindModel.Summary_of_Sales_by_QuarterQueryable;

    map(projection: (it: NorthwindModel.Summary_of_Sales_by_Quarter) => any): NorthwindModel.Summary_of_Sales_by_QuarterQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Summary_of_Sales_by_Quarter) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Summary_of_Sales_by_Quarter[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Summary_of_Sales_by_Quarter[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Summary_of_Sales_by_Quarter, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Summary_of_Sales_by_Quarter) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Summary_of_Sales_by_Quarter, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Summary_of_Sales_by_Quarter[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.Summary_of_Sales_by_QuarterQueryable;
    skip(amout: number): NorthwindModel.Summary_of_Sales_by_QuarterQueryable;

    order(selector: string): NorthwindModel.Summary_of_Sales_by_QuarterQueryable;
    orderBy(predicate: (it: NorthwindModel.Summary_of_Sales_by_Quarter) => any): NorthwindModel.Summary_of_Sales_by_QuarterQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Summary_of_Sales_by_Quarter) => any): NorthwindModel.Summary_of_Sales_by_QuarterQueryable;
    
    first(predicate: (it: NorthwindModel.Summary_of_Sales_by_Quarter, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Summary_of_Sales_by_Quarter) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Summary_of_Sales_by_Quarter, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Summary_of_Sales_by_Quarter[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.Summary_of_Sales_by_QuarterQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface Summary_of_Sales_by_QuarterSet extends Summary_of_Sales_by_QuarterQueryable {
    add(initData: { ShippedDate?: Date; OrderID?: number; Subtotal?: number; }): NorthwindModel.Summary_of_Sales_by_Quarter;
    add(item: NorthwindModel.Summary_of_Sales_by_Quarter): NorthwindModel.Summary_of_Sales_by_Quarter;

    attach(item: NorthwindModel.Summary_of_Sales_by_Quarter): void;
    attach(item: { OrderID: number; }): void;
    attachOrGet(item: NorthwindModel.Summary_of_Sales_by_Quarter): NorthwindModel.Summary_of_Sales_by_Quarter;
    attachOrGet(item: { OrderID: number; }): NorthwindModel.Summary_of_Sales_by_Quarter;

    detach(item: NorthwindModel.Summary_of_Sales_by_Quarter): void;
    detach(item: { OrderID: number; }): void;

    remove(item: NorthwindModel.Summary_of_Sales_by_Quarter): void;
    remove(item: { OrderID: number; }): void;
    
    elementType: new (initData: { ShippedDate?: Date; OrderID?: number; Subtotal?: number; }) => NorthwindModel.Summary_of_Sales_by_Quarter;
  }

  class Summary_of_Sales_by_Year extends $data.Entity {
    constructor ();
    constructor (initData: { ShippedDate?: Date; OrderID?: number; Subtotal?: number; });
    ShippedDate: Date;
    OrderID: number;
    Subtotal: number;
    
  }

  export interface Summary_of_Sales_by_YearQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Summary_of_Sales_by_Year) => bool): NorthwindModel.Summary_of_Sales_by_YearQueryable;
    filter(predicate:(it: NorthwindModel.Summary_of_Sales_by_Year) => bool, thisArg: any): NorthwindModel.Summary_of_Sales_by_YearQueryable;

    map(projection: (it: NorthwindModel.Summary_of_Sales_by_Year) => any): NorthwindModel.Summary_of_Sales_by_YearQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Summary_of_Sales_by_Year) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Summary_of_Sales_by_Year[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Summary_of_Sales_by_Year[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Summary_of_Sales_by_Year, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Summary_of_Sales_by_Year) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Summary_of_Sales_by_Year, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Summary_of_Sales_by_Year[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.Summary_of_Sales_by_YearQueryable;
    skip(amout: number): NorthwindModel.Summary_of_Sales_by_YearQueryable;

    order(selector: string): NorthwindModel.Summary_of_Sales_by_YearQueryable;
    orderBy(predicate: (it: NorthwindModel.Summary_of_Sales_by_Year) => any): NorthwindModel.Summary_of_Sales_by_YearQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Summary_of_Sales_by_Year) => any): NorthwindModel.Summary_of_Sales_by_YearQueryable;
    
    first(predicate: (it: NorthwindModel.Summary_of_Sales_by_Year, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Summary_of_Sales_by_Year) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Summary_of_Sales_by_Year, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Summary_of_Sales_by_Year[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.Summary_of_Sales_by_YearQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface Summary_of_Sales_by_YearSet extends Summary_of_Sales_by_YearQueryable {
    add(initData: { ShippedDate?: Date; OrderID?: number; Subtotal?: number; }): NorthwindModel.Summary_of_Sales_by_Year;
    add(item: NorthwindModel.Summary_of_Sales_by_Year): NorthwindModel.Summary_of_Sales_by_Year;

    attach(item: NorthwindModel.Summary_of_Sales_by_Year): void;
    attach(item: { OrderID: number; }): void;
    attachOrGet(item: NorthwindModel.Summary_of_Sales_by_Year): NorthwindModel.Summary_of_Sales_by_Year;
    attachOrGet(item: { OrderID: number; }): NorthwindModel.Summary_of_Sales_by_Year;

    detach(item: NorthwindModel.Summary_of_Sales_by_Year): void;
    detach(item: { OrderID: number; }): void;

    remove(item: NorthwindModel.Summary_of_Sales_by_Year): void;
    remove(item: { OrderID: number; }): void;
    
    elementType: new (initData: { ShippedDate?: Date; OrderID?: number; Subtotal?: number; }) => NorthwindModel.Summary_of_Sales_by_Year;
  }

}

declare module ODataWebV3.Northwind.Model {
  export class NorthwindEntities extends $data.EntityContext {
    onReady(handler: (context: NorthwindEntities) => void): $data.IPromise;
    Categories: NorthwindModel.CategorySet;
    CustomerDemographics: NorthwindModel.CustomerDemographicSet;
    Customers: NorthwindModel.CustomerSet;
    Employees: NorthwindModel.EmployeeSet;
    Order_Details: NorthwindModel.Order_DetailSet;
    Orders: NorthwindModel.OrderSet;
    Products: NorthwindModel.ProductSet;
    Regions: NorthwindModel.RegionSet;
    Shippers: NorthwindModel.ShipperSet;
    Suppliers: NorthwindModel.SupplierSet;
    Territories: NorthwindModel.TerritorySet;
    Alphabetical_list_of_products: NorthwindModel.Alphabetical_list_of_productSet;
    Category_Sales_for_1997: NorthwindModel.Category_Sales_for_1997Set;
    Current_Product_Lists: NorthwindModel.Current_Product_ListSet;
    Customer_and_Suppliers_by_Cities: NorthwindModel.Customer_and_Suppliers_by_CitySet;
    Invoices: NorthwindModel.InvoiceSet;
    Order_Details_Extendeds: NorthwindModel.Order_Details_ExtendedSet;
    Order_Subtotals: NorthwindModel.Order_SubtotalSet;
    Orders_Qries: NorthwindModel.Orders_QrySet;
    Product_Sales_for_1997: NorthwindModel.Product_Sales_for_1997Set;
    Products_Above_Average_Prices: NorthwindModel.Products_Above_Average_PriceSet;
    Products_by_Categories: NorthwindModel.Products_by_CategorySet;
    Sales_by_Categories: NorthwindModel.Sales_by_CategorySet;
    Sales_Totals_by_Amounts: NorthwindModel.Sales_Totals_by_AmountSet;
    Summary_of_Sales_by_Quarters: NorthwindModel.Summary_of_Sales_by_QuarterSet;
    Summary_of_Sales_by_Years: NorthwindModel.Summary_of_Sales_by_YearSet;
    
  }
}
